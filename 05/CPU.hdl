// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    ALU(
      x=D,
      y=AorM,
      zx=instruction[11], // instruction[6..11] are c bits
      nx=instruction[10],
      zy=instruction[9],
      ny=instruction[8],
      f=instruction[7],
      no=instruction[6],
      zr=zr,
      ng=ng,
      out=outM,
      out=aluOut);

    Not(in=instruction[15], out=Ainstruction);

    Mux16(a=aluOut, b=instruction, b[15]=false, sel=Ainstruction, out=Ain); // instruction[15] is i bit

    Or(a=instruction[5], b=Ainstruction, out=loadA); // loadA = d1 bit or i bit

    And(a=instruction[15], b=instruction[4], out=loadD); // d destination bit set, AND c instruction
    DRegister(in=aluOut, load=loadD, out=D); //instruction[4] is D
    ARegister(in=Ain, load=loadA, out=A, out[0..14]=addressM); // instruction[5] is A

    Mux16(a=A, b=inM, sel=instruction[12], out=AorM); // instruction[12] is a-bit. a==1 means M, a==0 means A

    And(a=instruction[3], b=instruction[15], out=writeM); // writeM if M dest bit is set, and it's a c instruction

    PCPlusControl(
      in=A,
      reset=reset,
      j=instruction[0..2], // instruction[0..2] are j bits
      zr=zr,
      ng=ng,
      cInstruction=instruction[15],
      out[0..14]=pc);

}
